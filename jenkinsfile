pipeline {
    agent any
    environment {
        MAVEN_HOME = '/usr/share/maven'
        PATH = "${MAVEN_HOME}/bin:${env.PATH}"
        DOCKER_REGISTRY = "localhost:5000"
        GIT_REPO = "https://github.com/SarjakNEPAL/Deployment.git"
        SONAR_HOST = "http://localhost:9000"
    }
    stages {
         stage('cleaning directory') {
            steps {
                deleteDir()
            }
        }
        stage('Checkout Source') {
            steps {
                echo "Cloning repository..."
                sh 'git clone $GIT_REPO .'
            }
        }

        stage('Build with Maven') {
            steps {
                echo "Building application..."
                sh 'mvn clean package'
            }
        }

        stage('SonarQube Analysis') {
            steps {
                echo "Running SonarQube analysis..."
                sh 'mvn sonar:sonar -Dsonar.host.url=$SONAR_HOST'
            }
        }

        stage('Quality Gate') {
            steps {
                script {
                    def qg = waitForQualityGate()
                    if (qg.status != 'OK') {
                        error "Pipeline aborted due to Quality Gate failure"
                    }
                }
            }
        }

        stage('Docker Build & Push') {
            steps {
                echo "Building Docker image..."
                sh 'docker build -t $DOCKER_REGISTRY/my_app:$BUILD_NUMBER -f docker/Dockerfile .'
                
                echo "Pushing Docker image to local registry..."
                sh 'docker push $DOCKER_REGISTRY/my_app:$BUILD_NUMBER'
            }
        }

        stage('Deploy with Ansible') {
            steps {
                echo "Deploying application using Ansible..."
                sh 'ansible-playbook -i ansible/inventory ansible/deploy.yml --extra-vars "artifact_version=$BUILD_NUMBER"'
            }
        }

        stage('Setup Monitoring') {
            steps {
                echo "Starting Prometheus & Grafana..."
                sh 'docker-compose -f monitoring/docker-compose.yml up -d'
            }
        }
    }
    
    post {
        success {
            echo "Deployment Successful!"
            mail to: 'your-email@example.com',
                 subject: "✅ BUILD SUCCESSFUL: Build #${BUILD_NUMBER}",
                 body: "Build #${BUILD_NUMBER} completed successfully. View details at: ${BUILD_URL}"
        }
        failure {
            echo "Deployment Failed!"
            mail to: 'your-email@example.com',
                 subject: "❌ BUILD FAILED: Build #${BUILD_NUMBER}",
                 body: "Build #${BUILD_NUMBER} failed. Check logs at: ${BUILD_URL}"
        }
    }
}
